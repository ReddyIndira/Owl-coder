class Solution {
public:
    int dfs(int node,vector<int>adj[],vector<int>&visited,vector<int>&pathvis)
    {
        visited[node]=1;
        pathvis[node]=1;
        for(auto it:adj[node])
        {
            if(!visited[it])
            {
                if(dfs(it,adj,visited,pathvis)==1) return 1;
            }
            else if(pathvis[it]==1)
            { 
                return 1;
            }
        }
        pathvis[node]=0;
        return 0;
    }
    bool canFinish(int numCourses, vector<vector<int>>& prerequisites) {
        int n=numCourses;
        int n1=prerequisites.size();
        vector<int>adj[n+1];
        for(int i=0;i<prerequisites.size();i++)
        {
            int u=prerequisites[i][0];
            int v=prerequisites[i][1];
            adj[u].push_back(v);
        }
        vector<int>visited(numCourses+1,0);
        vector<int>pathvis(n+1);
        for(int i=0;i<n;i++)
        {
            if(!visited[i])
            {
                if(dfs(i,adj,visited,pathvis)==1)
                {
                    return false;
                }
            }
        }
        return true;
    }
};
